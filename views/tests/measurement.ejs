<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Measurement</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.min.js"></script>
  </head>

  <style>
    body {
      /* display: flex; */
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f4f4f4;
    }
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
      opacity: 1;
    }

    .container {
      max-width: 200px;
      margin: 500px;
      padding: 150px;
    }

    .video-container {
      display: flex;
      flex-direction: column;
      /* Stack items vertically */
      align-items: center;
      /* Center items horizontally */
      gap: 20px;
      /* Adjust spacing between items */
    }

    video {
      width: 50%;
      max-width: 50px;
      border: 1px solid #ccc;
      border-radius: 8px;
      background-color: #000;
      padding-top: 400;
    }

    .options-panel {
      position: absolute;
      top: 50%;
      right: 20px;
      /* Adjust distance from the right */
      transform: translateY(-50%);
      width: 300px;
      /* Adjust the width as needed */
      padding: 16px;
      background-color: #fff;
      /* Adjust the background color */
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .options-panel form {
      width: 100%;
    }

    .options-panel input[type="submit"] {
      width: calc(100% - 4px);
      /* Adjust submit button width */
      margin-top: 10px;
    }

    .button {
      display: inline-block;
      background-color: #ffea00;
      color: #fff;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-bottom: 10px;
      text-transform: uppercase;
      font-weight: bold;
      transition: background-color 0.3s ease;
      text-align: center;
    }

    .button:hover {
      background-color: #615902;
    }

    #goBackButton {
      position: fixed;
      top: 10px;
      left: 20px;
      background-color: #ff00ff;
      color: #fff;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      z-index: 9999;
    }

    #goBackButton:hover {
      background-color: #b30071;
    }

    .file-input-container {
      position: relative;
      overflow: hidden;
      display: inline-block;
    }

    .file-input-container input[type="file"] {
      position: absolute;
      font-size: 100px;
      opacity: 0;
      right: 0;
      top: 0;
    }

    .range-container label {
      display: block;
      margin-bottom: 2px;
      margin-top: 10px;
      font-weight: bold;
      font-size: 16px;
      color: #333;
    }

    /* .range-container input[type="number"] {
        width: 100px;
        padding: 8px;
        margin-bottom: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        font-size: 14px;
    } */

    #clipButton {
      margin-right: 10px;
      margin-top: 10px;
      background-color: #28a745;
      color: #fff;
    }

    #clipButton:hover {
      background-color: #218838;
    }

    #captureImageButton {
      margin-left: 0px;
      margin-bottom: 10px;
      background-color: #dc3545;
      color: #fff;
    }

    #captureImageButton:hover {
      background-color: #c82333;
    }

    .range-container {
      margin-bottom: 10px;
    }

    .range-container label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }

    .range-container input[type="range"] {
      width: calc(100% - 40px);
    }

    .range-container output {
      display: inline-block;
      width: 40px;
      margin-left: 10px;
    }

    .selection {
      position: absolute;
      top: 0;
      /* Adjust as needed */
      left: 0;
      /* Adjust as needed */
      width: 100px;
      /* Adjust as needed */
      height: 100px;
      /* Adjust as needed */
      border: 2px dashed red;
      pointer-events: none;
      z-index: 9999;
      /* Ensure it's above other content */
      display: none;
      /* Ensure it's visible */
    }

    .frame-container {
      margin-top: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      padding: 10px;
    }

    .frame-container label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }

    .frame-container select,
    .frame-container input[type="number"] {
      width: calc(50% - 5px);
      padding: 5px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }

    .coordinate-container {
      margin-top: 10px;
    }
  </style>

  <body>
    <script>
      window.client_api = "<%= client_api %>";
      window.server_api = "<%= server_api %>";
      const server_api = window.server_api;
    </script>
    <!-- <canvas class="border border-2 border-red-400 mx-auto m-2" id="canvas2" width="1280" height="720"></canvas> -->
    <div class="flex items-startjustify-start gap-x-2 py-4">
      <div class="m-4 w-full">
        <!-- Right side: Options and buttons -->
        <div class="flex items-center p-4 gap-x-2">
          <!-- Left side: Video display -->
          <div class="w-80 py-4 hidden">
            <div id="selection" class="selection"></div>
            <img id="imgSperm" class="img-sperm" src="" />
          </div>
          <div class="mr-4">
            <button
              id="uploadImg"
              class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md mt-2"
            >
              Upload Img
            </button>
          </div>

          <div class="flex">
            <form
              id="myForm"
              name="myForm"
              method="POST"
              onsubmit="alert"
              class="width-100"
              action="http://primeandrocare.com/measure.php"
            >
              <div class="flex items-end gap-x-2">
                <div>
                  <label>TEST</label>
                  <select
                    name="test"
                    class="w-fit border rounded-md py-1 px-2 mb-2 block"
                    required
                  >
                    <option value="">-- SELECT TEST --</option>
                    <option value="MOTILITY">MOTILITY</option>
                    <option value="MORPHOLOGY">MORPHOLOGY</option>
                    <option value="VITALITY">VITALITY</option>
                    <option value="DNA">DNA</option>
                  </select>
                </div>
                <div>
                  <label>image name</label>
                  <input
                    id="name"
                    type="text"
                    name="name"
                    class="w-full border rounded-md p-1 px-2 mb-2"
                    placeholder="name"
                  />
                </div>
                <div>
                  <label for="scale"
                    >Enter the distance of the line you drew (in Î¼m):
                  </label>
                  <div class="flex gap-x-2">
                    <input
                      class="bg-white rounded-md p-1 px-2 border my-2 w-52"
                      type="number"
                      id="scale"
                      name="scale"
                      step="any"
                      placeholder="-- Enter calibration"
                    />
                    <input
                      class="bg-white rounded-md p-1 px-2 border my-2 block w-52"
                      id="gridValue"
                      name="gridvalue"
                      placeholder="-- grid Value"
                    />
                  </div>
                </div>
                <p
                  class="bg-white rounded-md p-1 px-2 border my-2 block w-52"
                  id="resolution"
                >
                  -- Resolution
                </p>
                <div class="flex mb-2 gap-x-2">
                  <select
                    id="selectGrid"
                    name="gridpercentage"
                    class="px-4 py-1 border-[1px] border-black hover:bg-black hover:text-white transition"
                    required
                  >
                    <option value="100" selected>100%</option>
                    <option value="90">90%</option>
                    <option value="80">80%</option>
                    <option value="70">70%</option>
                    <option value="60">60%</option>
                    <option value="50">50%</option>
                    <option value="40">40%</option>
                    <option value="30">30%</option>
                    <option value="20">20%</option>
                    <option value="10">10%</option>
                  </select>
                  <span
                    class="px-4 py-1 border-[1px] border-black hover:bg-black hover:text-white transition"
                    onclick="drawGrid()"
                  >
                    Grid
                  </span>

                  <input
                    type="submit"
                    id="navigateButton"
                    class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-6 rounded-md block"
                    id="navigateButton"
                    name="ADD"
                    value="ADD"
                  />
                </div>
              </div>
            </form>
          </div>
        </div>
        <div id="statusMessage" class="text-red-600"></div>

        <p class="font-bold">Line Draw Area</p>
        <div>
          <div id="measurement">Draw a line to measure its length.</div>
          <div id="lineLength">Draw a line to measure its length.</div>

          <div>
            <button
              class="px-4 py-1 border-[1px] border-black hover:bg-black hover:text-white transition"
              onclick="init()"
              id="displayImg"
            >
              DisplayImg
            </button>
            <button
              class="px-4 py-1 border-[1px] border-black hover:bg-black hover:text-white transition"
              onclick="startMeasurement()"
            >
              Measure
            </button>

            <button
              class="px-4 py-1 border-[1px] border-black hover:bg-black hover:text-white transition"
              onclick="calibrate()"
            >
              Calibrate
            </button>

            <br />
            <br />
          </div>
          <canvas
            class="border border-2 border-red-400"
            id="canvas2"
            width="1360"
            height="765"
          ></canvas>
        </div>
      </div>

      <div class="panel w-1/5 py-10 p-4 border shadow-lg">
        <div class="flex">
          <div>
            <div class="range-container">
              <label for="brightnessRange">Brightness:</label>
              <input
                type="range"
                id="brightnessRange"
                min="0"
                max="2"
                step="0.1"
                value="1"
              />
            </div>
            <div class="range-container">
              <label for="contrastRange">Contrast:</label>
              <input
                type="range"
                id="contrastRange"
                min="0"
                max="2"
                step="0.1"
                value="1"
              />
            </div>
            <div class="range-container">
              <label for="saturationRange">Saturation:</label>
              <input
                type="range"
                id="saturationRange"
                min="0"
                max="2"
                step="0.1"
                value="1"
              />
            </div>
            <div class="range-container">
              <label for="temperatureRange">Temperature:</label>
              <input
                type="range"
                id="temperatureRange"
                min="0"
                max="2"
                step="0.1"
                value="1"
              />
            </div>
            <div class="range-container">
              <label for="gainRange">Gain:</label>
              <input
                type="range"
                id="gainRange"
                min="0"
                max="2"
                step="0.1"
                value="1"
              />
            </div>
            <div class="range-container">
              <label for="alphaRange">Alpha:</label>
              <input
                type="range"
                id="alphaRange"
                min="0"
                max="1"
                step="0.1"
                value="1"
              />
            </div>
            <div class="range-container">
              <label for="whiteBalanceRange">White Balance:</label>
              <!-- <input type="range" id="whiteBalanceRange" min="0" max="360" step="1" value="0" /> -->
              <input
                type="range"
                id="whiteBalanceRange"
                min="0.5"
                max="7"
                step="0.01"
                value="0"
              />
            </div>
            <div class="range-container">
              <label for="tintRange">Tint:</label>
              <input
                type="range"
                id="tintRange"
                min="0"
                max="360"
                step="1"
                value="0"
              />
            </div>
            <div class="range-container">
              <label for="fpsRange">FPS:</label>
              <input
                type="range"
                id="fpsRange"
                min="1"
                max="60"
                step="1"
                value="30"
              />
              <span id="fpsValue">30</span> FPS
            </div>
          </div>

          <div>
            <div class="frame-container">
              <label>Frame:</label>
              <select id="frameSelect">
                <option value="none">None</option>
                <option value="dashed">Dashed</option>
                <option value="dotted">Dotted</option>
              </select>
              <div>
                <label for="frameWidth">Width:</label>
                <input type="number" id="frameWidth" value="0" />
              </div>
              <div>
                <label for="frameHeight">Height:</label>
                <input type="number" id="frameHeight" value="0" />
              </div>
              <div class="coordinate-container">
                <label for="frameX">X:</label>
                <input type="number" id="frameX" value="0" />
                <label for="frameY">Y:</label>
                <input type="number" id="frameY" value="0" />
              </div>
            </div>
            <div class="range-container">
              <label for="startTime">Start Time (seconds):</label>
              <input type="number" id="startTime" min="0" value="0" />
            </div>
            <div class="range-container">
              <label for="endTime">End Time (seconds):</label>
              <input type="number" id="endTime" min="0" value="10" />
            </div>
          </div>
        </div>
        <button id="clipButton" class="button">Clip Video</button>
        <button id="captureImageButton" class="button">Capture Image</button>
      </div>
    </div>

    <canvas id="canvas"></canvas>

    <!-- File input and upload button -->
    <input type="file" id="fileInput" class="hidden" />

    <script>
      // below js is just for styling
      // File input and upload button
      const fileInput = document.getElementById("fileInput");
      const uploadBtn = document.getElementById("uploadBtn");
      const processBtn = document.getElementById("processBtn");
      const statusMessage = document.getElementById("statusMessage");
      let socket = null;
      // Function to handle file uplo
      // document
      //     .getElementById("navigateButton")
      //     .addEventListener("click", function () {
      //         window.location.href = "http://localhost:8080/primeandrocare/measure.php";
      //     });

      // document.addEventListener("DOMContentLoaded", function () {
      //     document
      //         .getElementById("processBtn")
      //         .addEventListener("click", temp_processVideo);
      // });

      const videoplayer = document.getElementById("player");
      function handleFileUpload(file) {
        const formData = new FormData();
        formData.append("video", file);

        fetch(`${server_api}/upload`, {
          method: "POST",
          body: formData,
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Upload failed");
            }
            return response.json();
          })
          .then((data) => {
            console.log("Upload successful:", data);
            // Enable the process button after successful upload
            document.getElementById("processBtn").disabled = false;
            // Set the source of the uploaded video element

            document.getElementById("uploadedVideo").pause(); // Reload the video player
            document.getElementById("videoSource").src =
              `${server_api}/static/uploads/` + data.filename;
            document.getElementById("uploadedVideo").load(); // Reload the video player
            document.getElementById("uploadedVideo").play(); // Start playing the video

            statusMessage.textContent = "Upload Successful";
            localStorage.setItem("filename", data.filename);
          })
          .catch((error) => {
            console.error("Error uploading file:", error);
          });
      }

      // Function to process the video
      function processVideo() {
        statusMessage.textContent = "Processing you video please wait";
        const filename = localStorage.getItem("filename");
        fetch(`${server_api}/process-video`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ filename: filename }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            console.log(data);
            // Fill input fields with processed data
            document.getElementById("total").value = data.total;
            document.getElementById("high_speed").value = data.high_speed;
            document.getElementById("medium_speed").value = data.medium_speed;
            document.getElementById("low_speed").value = data.low_speed;
            document.getElementById("dead").value = data.dead;

            document.getElementById("uploadedVideo").pause(); // Reload the video player
            const videoSource = document.getElementById("videoSource");
            videoSource.src = data.new_filepath;
            // toggleVideoDisplay(true);
            document.getElementById("uploadedVideo").load(); // Reload the video player
            document.getElementById("uploadedVideo").play(); // Start playing the video

            statusMessage.textContent = "Video processing successful";
            statusMessage.classList.remove("text-red-600");
            statusMessage.classList.add("text-green-600");
          })
          .catch((error) => {
            statusMessage.textContent = "Video processing failed";
            statusMessage.classList.remove("text-green-600");
            statusMessage.classList.add("text-red-600");
            console.error(
              "There was a problem with the fetch operation:",
              error
            );
          });
      }

      function updateImage() {
        const fileInput = document.getElementById("file");
        const imgElement = document.getElementById("imgSperm");
        const file = fileInput.files[0];
        const reader = new FileReader();
        reader.onload = function (e) {
          imgElement.src = e.target.result;
        };
        reader.readAsDataURL(file);

        document.getElementById("total").value = null;
        document.getElementById("high_speed").value = null;
        document.getElementById("medium_speed").value = null;
        document.getElementById("low_speed").value = null;
        document.getElementById("dead").value = null;
      }

      // Event listener for file input change
      document
        .getElementById("fileInput")
        .addEventListener("change", (event) => {
          const file = event.target.files[0];
          if (file) {
            handleFileUpload(file);
          }
        });

      // Event listener for upload button click
      // document.getElementById("uploadBtn").addEventListener("click", () => {
      //     document.getElementById("fileInput").click();

      // });

      // Event listener for process button click

      function temp_processVideo() {
        const imgElement = document.getElementById("imgSperm");
        if (imgElement.style.display == "none") {
          processVideo();
        } else {
          captureVideo();
        }
      }
      // // Event listener for upload button click
      // uploadBtn.addEventListener("click", () => {
      //   fileInput.click();
      // });

      // Event listener for file input change
      fileInput.addEventListener("change", () => {
        processBtn.disabled = false;
        statusMessage.textContent = "";
        toggleVideoDisplay(true);
      });

      var img = document.getElementById("streamImage");
      var frameRate = 10; // frames per second
      var captureDuration = 2; // seconds
      var frames = [];
      var capturingVideo = false;
      function captureFrame() {
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        canvas.width = img.width;
        canvas.height = img.height;
        context.drawImage(img, 0, 0, img.width, img.height);
        frames.push(canvas.toDataURL("image/jpeg"));
      }

      function captureVideo() {
        frames = []; // Clear previous frames
        capturingVideo = true; // Start video capturing
        var imgElement = document.getElementById("imgSperm");
        var intervalId = setInterval(function () {
          captureFrameFromImageElement(imgElement);
        }, 1000 / frameRate);

        setTimeout(function () {
          clearInterval(intervalId);
          capturingVideo = false; // Stop video capturing
          // alert('10-second video captured from the camera!');
          saveVideoToFile(); // Save the captured frames as a video file
        }, captureDuration * 1000);
      }

      function captureFrameFromImageElement(imgElement) {
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        canvas.width = imgElement.width;
        canvas.height = imgElement.height;
        context.drawImage(
          imgElement,
          0,
          0,
          imgElement.width,
          imgElement.height
        );
        frames.push(canvas.toDataURL("image/jpeg"));
      }

      function saveVideoToFile() {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", `${server_api}/save-captured-video`, true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.send(JSON.stringify({ frames: frames }));
        xhr.onload = function () {
          if (xhr.status == 200) {
            var response = JSON.parse(xhr.responseText);
            localStorage.setItem("filename", response.filename);
            processBtn.disabled = false; // Enable processing button after file is saved
            processVideo();
          } else {
            console.error("Error saving video file:", xhr.responseText);
            alert("Error saving video.");
          }
        };
      }

      // document
      //     .getElementById("detectCameraBtn")
      //     .addEventListener("click", function () {
      //         // toggleVideoDisplay(false);
      //         // document.getElementById("processBtn").disabled = false;
      //         const imgElement = document.getElementById("imgSperm");

      //         console.log(imgElement.src);
      //         if (!socket) {
      //             let detected = true;
      //             socket = io.connect(`${server_api}`);
      //             socket.on("image_frame", function (data) {
      //                 imgElement.src = "data:image/jpeg;base64," + data.image;
      //                 console.log(imgElement.src);

      //                 if (detected) {
      //                     alert('cammera connected');
      //                     document.getElementById('displayImg').click()
      //                     detected = false;
      //                 }
      //             });
      //         } else {
      //             socket.disconnect();
      //             socket = null;
      //         }
      //     });

      function toggleCanvasDisplay(showCanvas) {
        const canvas = document.getElementById("canvas");
        canvas.style.display = showCanvas ? "block" : "none";
      }

      const videoElement = document.getElementById("canvas2");
      const brightnessRange = document.getElementById("brightnessRange");
      const contrastRange = document.getElementById("contrastRange");
      const saturationRange = document.getElementById("saturationRange");
      const temperatureRange = document.getElementById("temperatureRange");
      const gainRange = document.getElementById("gainRange");
      const alphaRange = document.getElementById("alphaRange");
      const tintRange = document.getElementById("tintRange");
      const selection = document.getElementById("selection");
      const frameSelect = document.getElementById("frameSelect");
      const frameX = document.getElementById("frameX");
      const frameY = document.getElementById("frameY");
      const canvas = document.getElementById("canvas");
      canvas.style.display = "none";

      canvas.width = videoElement.videoWidth;
      canvas.height = videoElement.videoHeight;
      const ctx = canvas.getContext("2d");

      // document
      //     .getElementById("upload")
      //     .addEventListener("change", function (event) {
      //         const file = event.target.files[0];
      //         const url = URL.createObjectURL(file);
      //         videoElement.src = url;
      //     });

      const fpsRange = document.getElementById("fpsRange");
      const fpsValue = document.getElementById("fpsValue");

      fpsRange.addEventListener("input", function () {
        fpsValue.textContent = this.value;
        videoElement.playbackRate = this.value / 30;
      });

      function applyFiltersToVideoElement() {
        const brightnessValue = parseFloat(brightnessRange.value);
        const contrastValue = parseFloat(contrastRange.value);
        const saturationValue = parseFloat(saturationRange.value);
        const alphaValue = parseFloat(alphaRange.value);
        const tintValue = parseFloat(tintRange.value);
        const temperatureValue = parseFloat(temperatureRange.value);
        const gainValue = parseFloat(gainRange.value);

        videoElement.style.filter = `brightness(${brightnessValue}) contrast(${contrastValue}) saturate(${saturationValue}) hue-rotate(${
          (temperatureValue - 1) * 180
        }deg) opacity(${alphaValue}) hue-rotate(${tintValue}deg)`;
        videoElement.style.opacity = gainValue;
      }

      function applyFiltersToContext(context, canvas) {
        const brightnessValue = parseFloat(brightnessRange.value);
        const contrastValue = parseFloat(contrastRange.value);
        const saturationValue = parseFloat(saturationRange.value);
        const alphaValue = parseFloat(alphaRange.value);
        const tintValue = parseFloat(tintRange.value);
        const temperatureValue = parseFloat(temperatureRange.value);
        const gainValue = parseFloat(gainRange.value);

        context.filter = `brightness(${brightnessValue}) contrast(${contrastValue}) saturate(${saturationValue}) hue-rotate(${
          (temperatureValue - 1) * 180
        }deg) opacity(${alphaValue}) hue-rotate(${tintValue}deg)`;
        context.globalAlpha = gainValue;

        // Apply filters to the drawn image
        context.drawImage(canvas, 0, 0, canvas.width, canvas.height);
      }

      // Call this function to apply filters to the video element for live preview
      function updateLivePreview() {
        applyFiltersToVideoElement();
      }

      // Add event listeners to filter range inputs to update the live preview in real-time
      brightnessRange.addEventListener("input", updateLivePreview);
      contrastRange.addEventListener("input", updateLivePreview);
      saturationRange.addEventListener("input", updateLivePreview);
      alphaRange.addEventListener("input", updateLivePreview);
      tintRange.addEventListener("input", updateLivePreview);
      temperatureRange.addEventListener("input", updateLivePreview);
      gainRange.addEventListener("input", updateLivePreview);
      // Initial call to apply filters when the page loads
      window.onload = updateLivePreview();

      function captureFrameFromImageElement(imgElement) {
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        canvas.width = imgElement.width;
        canvas.height = imgElement.height;
        context.drawImage(
          imgElement,
          0,
          0,
          imgElement.width,
          imgElement.height
        );

        // Apply filters to context
        applyFiltersToContext(context, canvas);

        return canvas.toDataURL("image/jpeg");
      }

      document
        .getElementById("frameWidth")
        .addEventListener("input", function () {
          const width = this.value;
          selection.style.width = `${width}px`;
          selection.style.display = "block";
        });

      document
        .getElementById("frameHeight")
        .addEventListener("input", function () {
          const height = this.value;
          selection.style.height = `${height}px`;
          selection.style.display = "block";
        });

      frameSelect.addEventListener("change", function () {
        const frameStyle = this.value;
        selection.style.borderStyle = frameStyle;
        selection.style.display = frameStyle === "none" ? "none" : "block";
      });

      frameX.addEventListener("input", function () {
        const x = this.value;
        selection.style.left = `${x}px`;
        selection.style.display = "block";
      });

      frameY.addEventListener("input", function () {
        const y = this.value;
        selection.style.top = `${y}px`;
        selection.style.display = "block";
      });

      document
        .getElementById("clipButton")
        .addEventListener("click", function () {
          const file = document.getElementById("upload").files[0];
          const formData = new FormData();
          formData.append("file", file);
          formData.append("brightness", brightnessRange.value);
          formData.append("contrast", contrastRange.value);
          formData.append("saturation", saturationRange.value);
          formData.append("temperature", temperatureRange.value);
          formData.append("gain", gainRange.value);
          formData.append("alpha", alphaRange.value);
          formData.append("tint", tintRange.value);
          formData.append("startX", frameX.value);
          formData.append("startY", frameY.value);
          formData.append(
            "endX",
            parseInt(frameX.value) +
              parseInt(document.getElementById("frameWidth").value)
          );
          formData.append(
            "endY",
            parseInt(frameY.value) +
              parseInt(document.getElementById("frameHeight").value)
          );
          formData.append(
            "frameWidth",
            document.getElementById("frameWidth").value
          );
          formData.append(
            "frameHeight",
            document.getElementById("frameHeight").value
          );
          formData.append(
            "startTime",
            document.getElementById("startTime").value
          );
          formData.append("endTime", document.getElementById("endTime").value);
          const fpsValue = document.getElementById("fpsRange").value;
          formData.append("fps", fpsValue);

          fetch("/clip", {
            method: "POST",
            body: formData,
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error(
                  "Network response was not ok " + response.statusText
                );
              }
              return response.blob();
            })
            .then((blob) => {
              const url = URL.createObjectURL(blob);
              const link = document.createElement("a");
              link.href = url;
              link.download = "filtered_clip.mp4";
              link.click();
            })
            .catch((error) => console.error("Error clipping video:", error));
        });

      document
        .getElementById("captureImageButton")
        .addEventListener("click", function () {
          const frameWidth = parseInt(
            document.getElementById("frameWidth").value
          );
          const frameHeight = parseInt(
            document.getElementById("frameHeight").value
          );

          const frameX = parseInt(document.getElementById("frameX").value);
          const frameY = parseInt(document.getElementById("frameY").value);

          const canvas = document.getElementById("canvas");
          const ctx = canvas.getContext("2d");
          const imgElement = document.getElementById("imgSperm");

          // Calculate the width and height for the canvas
          const canvasWidth = frameWidth;
          const canvasHeight = frameHeight;

          canvas.width = canvasWidth;
          canvas.height = canvasHeight;

          // Debugging: Log dimensions and coordinates
          console.log("Frame Coordinates:", frameX, frameY);
          console.log("Frame Dimensions:", canvasWidth, canvasHeight);

          // Ensure the image is fully loaded before drawing
          imgElement.onload = function () {
            // Apply CSS filters from the image to the canvas context
            ctx.filter = getComputedStyle(imgElement).filter;

            // Draw the selected part of the image onto the canvas
            ctx.drawImage(
              imgElement,
              frameX,
              frameY,
              frameWidth,
              frameHeight,
              0,
              0,
              canvasWidth,
              canvasHeight
            );

            // Debugging: Log canvas dimensions
            console.log("Canvas Dimensions:", canvas.width, canvas.height);
            console.log("ctx", ctx);

            // Frame style
            const frameStyle = document.getElementById("frameSelect").value;
            ctx.strokeStyle = "red";
            ctx.lineWidth = 2;
            ctx.setLineDash([]);

            if (frameStyle === "dashed") {
              ctx.setLineDash([5, 5]);
            } else if (frameStyle === "dotted") {
              ctx.setLineDash([2, 2]);
            }

            // Draw the rectangle frame
            ctx.strokeRect(0, 0, canvasWidth, canvasHeight);

            // Convert the canvas to a data URL and download the image
            const imageDataURL = canvas.toDataURL("image/png");
            const downloadLink = document.createElement("a");
            downloadLink.href = imageDataURL;
            downloadLink.download = "filtered_image.png";
            downloadLink.click();
          };

          // If the image is already loaded, trigger the onload event manually
          // if (imgElement.complete) {
          imgElement.onload();
          // }
        });

      const rect = document.getElementById("canvas2").getBoundingClientRect();

      const x = rect.left + window.scrollX;
      const y = rect.top + window.scrollY;

      console.log(x, y);

      document.getElementById("frameX").value = x;
      document.getElementById("frameY").value = y;
      console.log(document.getElementById("frameX").value);
    </script>

    <script>
      let canvas2 = document.getElementById("canvas2");
      let ctx2 = canvas2.getContext("2d");
      let firstClick = [0, 0];
      let isDragging = false;
      let scaleFactor = null;
      let isMeasuring = false;
      let cursorX, cursorY;
      var selectedValue = null;
      document.addEventListener("DOMContentLoaded", function () {
        const selectElement = document.getElementById("selectGrid");
        // const gridValue = document.getElementById("gridValue");
        // Event listener for change event
        selectElement.addEventListener("change", function () {
          //   gridValue.innerText = selectElement.value;
          selectedValue = selectElement.value;
          console.log(gridValue);
        });
      });
      function startDragLine(e) {
        firstClick = [e.offsetX, e.offsetY];
        isDragging = true;
      }

      function stopDragLine(e) {
        if (!isDragging) return;
        isDragging = false;

        // Calculate the distance of the line drawn
        const deltaX = cursorX - firstClick[0];
        const deltaY = cursorY - firstClick[1];
        const lineLength = Math.sqrt(deltaX ** 2 + deltaY ** 2);

        if (isMeasuring) {
          if (scaleFactor) {
            const measuredLength = lineLength * scaleFactor;

            document.getElementById(
              "measurement"
            ).innerText = `The length of the line is ${measuredLength.toFixed(
              2
            )} Î¼m.`;
            document.getElementById(
              "lineLength"
            ).innerText = `The length of the line is ${lineLength} pixels.`;
          } else {
            document.getElementById(
              "measurement"
            ).innerText = `You drew a line of ${lineLength.toFixed(
              2
            )}  Î¼m. Set a scale to measure in Î¼m.`;
          }
        }
      }

      function calibrate() {
        const scaleLength = parseFloat(document.getElementById("scale").value);
        if (!scaleLength) {
          alert("Please enter a valid scale length.");
          return;
        }

        const deltaX = cursorX - firstClick[0];
        const deltaY = cursorY - firstClick[1];
        const lineLength = Math.sqrt(deltaX ** 2 + deltaY ** 2);

        if (lineLength === 0) {
          alert("Please draw a line first.");
          return;
        }

        scaleFactor = scaleLength / lineLength;
        // alert(`Calibration complete. 1 pixel = ${scaleFactor.toFixed(2)} Î¼m.`);
        alert(`Calibration complete. 1Î¼m = 0.0037795px`);

        document.getElementById(
          "measurement"
        ).innerText = `Calibration complete. Draw a new line to measure its length in Î¼m.`;
        document.getElementById("resolution").innerText = `${
          canvas2.width / (scaleLength / 1000000)
        }`;
      }

      function startMeasurement() {
        isMeasuring = true;
        document.getElementById(
          "measurement"
        ).innerText = `Measurement mode. Draw a line to measure its length.`;
      }

      function drawGrid() {
        if (!scaleFactor) {
          alert("Please calibrate before drawing the grid.");
          return;
        }
        const gridOptionSelected = document.getElementById("selectGrid").value;

        let gridSize = parseInt(gridOptionSelected); // Convert 100 micrometers to pixels
        const gridValue = document.getElementById("gridValue");
        // gridValue.disabled=false;

        // gridValue.value = (1920*1080) / (parseInt(griSize) * 100)
        console.log(gridSize);
        console.log(canvas2.width * scaleFactor);
        gridValue.value =
          (canvas2.width * canvas2.height * scaleFactor * scaleFactor) /
          (parseInt(gridSize) * 100);
        gridSize = gridSize / scaleFactor;
        console.log(gridSize);
        // gridValue.disabled=true;
        const img = new Image();
        img.src = document.getElementById("imgSperm").src; // Replace with your image path
        img.onload = function () {
          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
          ctx2.drawImage(img, 0, 0, canvas2.width, canvas2.height);

          ctx2.strokeStyle = "#000000"; // Bright green color
          ctx2.lineWidth = 0.5;

          ctx2.lineWidth = 0.5;
          ctx2.setLineDash([2, 2]); // Dotted line

          for (let x = 0; x < canvas2.width; x += gridSize) {
            ctx2.beginPath();
            ctx2.moveTo(x, 0);
            ctx2.lineTo(x, canvas2.height);

            ctx2.stroke();
          }

          for (let y = 0; y < canvas2.height; y += gridSize) {
            ctx2.beginPath();
            ctx2.moveTo(0, y);
            ctx2.lineTo(canvas2.width, y);

            ctx2.stroke();
          }

          ctx2.setLineDash([]); // Reset line dash
        };
      }

      function init() {
        const img = new Image();
        img.src = document.getElementById("imgSperm").src; // Replace with your image path
        img.onload = function () {
          ctx2.drawImage(img, 0, 0, canvas2.width, canvas2.height);
        };

        document.onmousemove = function (e) {
          if (isDragging) {
            cursorX = e.offsetX;
            cursorY = e.offsetY;

            // Constrain to straight line (horizontal or vertical)
            const deltaX = Math.abs(cursorX - firstClick[0]);
            const deltaY = Math.abs(cursorY - firstClick[1]);
            if (deltaX > deltaY) {
              cursorY = firstClick[1]; // Horizontal line
            } else {
              cursorX = firstClick[0]; // Vertical line
            }
            draw();
          }
        };

        canvas2.addEventListener("mousedown", startDragLine, false);
        canvas2.addEventListener("mouseup", stopDragLine, false);
      }

      function draw() {
        // Clear canvas2 and redraw the background image
        const img = new Image();
        img.src = document.getElementById("imgSperm").src; // Replace with your image path
        img.onload = function () {
          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
          ctx2.drawImage(img, 0, 0, canvas2.width, canvas2.height);

          // Draw the current line
          if (isDragging) {
            ctx2.beginPath();
            ctx2.moveTo(firstClick[0], firstClick[1]);
            ctx2.lineTo(cursorX, cursorY);
            ctx2.strokeStyle = "#FF0000";
            ctx2.stroke();
          }
        };
      }

      let tries = 3;

      const interval = setInterval(() => {
        if (tries >= 0) {
          console.log("trying to connect camera");
          tries = tries - 1;
          init();
        } else {
          clearInterval(interval);
        }
      }, 3000);
      init();
    </script>

    <script>
      document.getElementById("uploadImg").addEventListener("click", () => {
        document.getElementById("fileInput").click();
      });

      // Event listener for file input change
      document
        .getElementById("fileInput")
        .addEventListener("change", (event) => {
          const file = event.target.files[0];
          if (file) {
            const imgSperm = document.getElementById("imgSperm");
            const reader = new FileReader();

            reader.onload = function (e) {
              imgSperm.src = e.target.result;
              document.getElementById("displayImg").click();
            };

            reader.readAsDataURL(file);
          }
        });
    </script>

    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/camanjs/4.1.2/caman.full.min.js"
      integrity="sha512-JjFeUD2H//RHt+DjVf1BTuy1X5ZPtMl0svQ3RopX641DWoSilJ89LsFGq4Sw/6BSBfULqUW/CfnVopV5CfvRXA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script src="/tests/cameradetection.js"></script>
    <script src="/tests/savefilter.js"></script>
  </body>
</html>
